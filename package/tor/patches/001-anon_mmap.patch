diff -uNr tor-0.2.3.19-rc/src/common/util.c tor-0.2.3.19-rc-anon_mmap//src/common/util.c
--- tor-0.2.3.19-rc/src/common/util.c	2012-07-06 16:32:28.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/common/util.c	2012-07-09 11:39:11.995224656 -0400
@@ -73,6 +73,9 @@
 #ifdef HAVE_SYS_FCNTL_H
 #include <sys/fcntl.h>
 #endif
+#ifdef HAVE_SYS_MMAN_H
+#include <sys/mman.h>
+#endif
 #ifdef HAVE_TIME_H
 #include <time.h>
 #endif
@@ -1994,9 +1997,7 @@
  * we can write into a temporary file, and either remove the file on
  * failure, or replace the original file on success. */
 struct open_file_t {
-  char *tempname; /**< Name of the temporary file. */
   char *filename; /**< Name of the original file. */
-  unsigned rename_on_close:1; /**< Are we using the temporary file or not? */
   unsigned binary:1; /**< Did we open in binary mode? */
   int fd; /**< fd for the open file. */
   FILE *stdio_file; /**< stdio wrapper for <b>fd</b>. */
@@ -2035,18 +2036,15 @@
 #endif
   new_file->fd = -1;
   new_file->filename = tor_strdup(fname);
+  open_name = fname;
+
   if (open_flags & O_APPEND) {
-    open_name = fname;
-    new_file->rename_on_close = 0;
     append = 1;
     open_flags &= ~O_APPEND;
   } else {
-    tor_asprintf(&new_file->tempname, "%s.tmp", fname);
-    open_name = new_file->tempname;
-    /* We always replace an existing temporary file if there is one. */
+    /* We always replace an existing file if not appending. */
     open_flags |= O_CREAT|O_TRUNC;
     open_flags &= ~O_EXCL;
-    new_file->rename_on_close = 1;
   }
   if (open_flags & O_BINARY)
     new_file->binary = 1;
@@ -2074,7 +2072,6 @@
     close(new_file->fd);
   *data_out = NULL;
   tor_free(new_file->filename);
-  tor_free(new_file->tempname);
   tor_free(new_file);
   return -1;
 }
@@ -2134,22 +2131,7 @@
     abort_write = r = -1;
   }
 
-  if (file_data->rename_on_close) {
-    tor_assert(file_data->tempname && file_data->filename);
-    if (abort_write) {
-      unlink(file_data->tempname);
-    } else {
-      tor_assert(strcmp(file_data->filename, file_data->tempname));
-      if (replace_file(file_data->tempname, file_data->filename)) {
-        log_warn(LD_FS, "Error replacing \"%s\": %s", file_data->filename,
-                 strerror(errno));
-        r = -1;
-      }
-    }
-  }
-
   tor_free(file_data->filename);
-  tor_free(file_data->tempname);
   tor_free(file_data);
 
   return r;
@@ -4552,3 +4534,166 @@
   }
 }
 
+/* =====
+ * Anonymous mmaps for holding large chunks of data
+ * ===== */
+
+/* Initial size of anonymous mmap and the increase step if we need
+ * to make it bigger */
+#define MMAP_INCREASE_SIZE (1<<18)
+
+/** Create a new anonymous memory mapping. Return 0 on success. */
+int
+tor_mmap_anon(tor_mmap_t *handle)
+{
+  char *map;
+  ssize_t map_size, page_size;
+
+  /* round up the initial map size to the next page boundary,
+   * and allocate an anonymous map */
+  page_size = getpagesize();
+  map_size = MMAP_INCREASE_SIZE + (MMAP_INCREASE_SIZE%page_size ? page_size-MMAP_INCREASE_SIZE%page_size : 0);
+
+  if (MAP_FAILED == (map = mmap(NULL, map_size, PROT_READ|PROT_WRITE, MAP_ANONYMOUS | MAP_PRIVATE, -1, 0))) {
+    int save_errno = errno;
+    log_warn(LD_FS,"Could not create mmap: %s",
+             strerror(errno));
+    handle->data = NULL;
+    handle->size = handle->mapping_size = 0;
+    errno = save_errno;
+    return -1;
+  }
+
+  handle->data = map;
+  handle->size = 0;
+  handle->mapping_size = map_size;
+
+  return 0;
+}
+
+/* Free the mmap referred by the handle. Return 0. */
+int
+tor_munmap(tor_mmap_t *handle) {
+  munmap((void *)handle->data, handle->mapping_size);
+  handle->data = NULL;
+  handle->size = handle->mapping_size = 0;
+  return 0;
+}
+
+/* Make the memory map bigger by MMAP_INCREASE_SIZE. Return 0 on success */
+int
+tor_mremap_inc(tor_mmap_t *handle) {
+  /* Create a new anonymous mmap if we don't have one yet. */
+  if (handle->data==NULL)
+    return tor_mmap_anon(handle);
+
+  if (handle->size==handle->mapping_size) {
+    char *new_map;
+    int new_mapsize;
+    int page_size = getpagesize();
+
+    /* Add the increment and round up to the page boundary */
+    new_mapsize = handle->mapping_size + MMAP_INCREASE_SIZE + (MMAP_INCREASE_SIZE%page_size ? page_size-MMAP_INCREASE_SIZE%page_size : 0);
+
+    if (new_mapsize >= SIZE_T_CEILING) {
+      errno = ERANGE;
+      return -1;
+    }
+
+    /* Increase the map size */
+    if (MAP_FAILED == (new_map = mremap((void *)handle->data, handle->mapping_size, new_mapsize, MREMAP_MAYMOVE)))
+      return -1;
+
+    handle->data = new_map;
+    handle->mapping_size = new_mapsize;
+  }
+  return 0;
+}
+
+/** Read contents of <b>string</b> into a an
+ * anonymous map; return 0 on success. New data will be appended
+ * to existing data in the map. The map size will be increased if
+ * it's too small */
+int
+load_string_into_mmap(tor_mmap_t *handle, const char *string, const size_t length)
+{
+  char *pos=(char*)string;
+  ssize_t num;
+
+  tor_assert(string);
+
+  /* While there's enough data to fill up the map, fill it and increase the map size */
+  do {
+    /* When the current map is full, increase its size */
+    if (handle->size==handle->mapping_size && tor_mremap_inc(handle)) {
+      int save_errno = errno;
+      log_err(LD_FS,"Could not increase the anonymous memory mmaping while loading string");
+      errno = save_errno;
+      return -1;
+    }
+
+    /* Find out how much data we can handle in this iternation copy */
+    num = (length > handle->mapping_size-handle->size) ?
+           handle->mapping_size - handle->size : length;
+    memcpy((void *)handle->data+handle->size, pos, num);
+
+    /* advance the pointer */
+    pos+=num;
+    handle->size+=num;
+
+    /* Repeat if there was enough data and the map is full */
+  } while (handle->mapping_size==handle->size);
+
+  return 0;
+}
+
+/** Read contents of <b>filename</b> into a an
+ * anonymous map; return 0 on success. New data will be appended
+ * to existing data in the map. The map size will be increased if
+ * it's too small */
+int
+load_file_into_mmap(tor_mmap_t *handle, const char *filename)
+{
+  int fd; /* router file */
+  ssize_t r;
+
+  tor_assert(filename);
+
+  fd = tor_open_cloexec(filename,O_RDONLY|O_TEXT,0);
+  if (fd<0) {
+    int save_errno = errno;
+    log_info(LD_FS,"Could not open \"%s\": %s",filename,
+           strerror(errno));
+    errno = save_errno;
+    return -1;
+  }
+
+  /* While there's enough data to fill up the map, fill it and increase the map size */
+  do {
+    /* When the current map is full, increase its size */
+    if (handle->size==handle->mapping_size && tor_mremap_inc(handle)) {
+      int save_errno = errno;
+      log_err(LD_FS,"Could not increase the anonymous memory mmaping while reading from file \"%s\"", filename);
+      close(fd);
+      errno = save_errno;
+      return -1;
+    }
+
+    /* Fill the map with data */
+    r = read(fd,(void *)handle->data+handle->size,handle->mapping_size-handle->size);
+    if (r<0) {
+      int save_errno = errno;
+      log_warn(LD_FS,"Error reading from file \"%s\": %s", filename,
+             strerror(errno));
+      close(fd);
+      errno = save_errno;
+      return -1;
+    }
+    handle->size+=r;
+
+    /* Repeat if we haven't reached the end of the file */
+  } while (r);
+
+  close(fd);
+  return 0;
+}
diff -uNr tor-0.2.3.19-rc/src/common/util.h tor-0.2.3.19-rc-anon_mmap//src/common/util.h
--- tor-0.2.3.19-rc/src/common/util.h	2012-07-06 16:32:28.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/common/util.h	2012-07-09 11:39:11.995224656 -0400
@@ -366,6 +366,12 @@
 struct smartlist_t *tor_listdir(const char *dirname);
 int path_is_relative(const char *filename);
 
+int tor_mmap_anon(tor_mmap_t *handle);
+int tor_mremap_inc(tor_mmap_t *handle);
+int load_string_into_mmap(tor_mmap_t *handle, const char *string, const size_t length);
+int load_file_into_mmap(tor_mmap_t *handle, const char *filename);
+int tor_munmap(tor_mmap_t *handle);
+
 /* Process helpers */
 void start_daemon(void);
 void finish_daemon(const char *desired_cwd);
diff -uNr tor-0.2.3.19-rc/src/or/control.c tor-0.2.3.19-rc-anon_mmap//src/or/control.c
--- tor-0.2.3.19-rc/src/or/control.c	2012-07-06 16:32:28.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/control.c	2012-07-09 11:39:12.003224655 -0400
@@ -34,6 +34,7 @@
 #include "router.h"
 #include "routerlist.h"
 #include "routerparse.h"
+#include "microdesc.h"
 
 #ifndef _WIN32
 #include <pwd.h>
@@ -1666,8 +1667,8 @@
     const microdesc_t *md = NULL;
     if (node) md = node->md;
     if (md) {
-      tor_assert(md->body);
-      *answer = tor_strndup(md->body, md->bodylen);
+      tor_assert(microdesc_get_body(md));
+      *answer = tor_strndup(microdesc_get_body(md), md->bodylen);
     }
   } else if (!strcmpstart(question, "md/name/")) {
     /* XXX023 Setting 'warn_if_unnamed' here is a bit silly -- the
@@ -1677,8 +1678,8 @@
     const microdesc_t *md = NULL;
     if (node) md = node->md;
     if (md) {
-      tor_assert(md->body);
-      *answer = tor_strndup(md->body, md->bodylen);
+      tor_assert(microdesc_get_body(md));
+      *answer = tor_strndup(microdesc_get_body(md), md->bodylen);
     }
   } else if (!strcmpstart(question, "desc-annotations/id/")) {
     ri = router_get_by_hexdigest(question+
diff -uNr tor-0.2.3.19-rc/src/or/microdesc.c tor-0.2.3.19-rc-anon_mmap//src/or/microdesc.c
--- tor-0.2.3.19-rc/src/or/microdesc.c	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/microdesc.c	2012-07-09 11:39:12.011224656 -0400
@@ -65,6 +65,16 @@
              _microdesc_hash, _microdesc_eq, 0.6,
              malloc, realloc, free);
 
+/** Return the pointer to the body of <b>md</b>. */
+char *
+microdesc_get_body(const microdesc_t *md)
+{
+  return md->saved_location==SAVED_IN_CACHE?
+                             (void*)get_microdesc_cache()->cache_content->data
+                             + md->cache_offset
+                             : md->body;
+}
+
 /** Write the body of <b>md</b> into <b>f</b>, with appropriate annotations.
  * On success, return the total number of bytes written, and set
  * *<b>annotation_len_out</b> to the number of bytes written as
@@ -92,8 +102,7 @@
     *annotation_len_out = 0;
   }
 
-  md->off = (off_t) ftell(f);
-  written = fwrite(md->body, 1, md->bodylen, f);
+  written = fwrite(microdesc_get_body(md), 1, md->bodylen, f);
   if (written != md->bodylen) {
     log_warn(LD_DIR,
              "Couldn't dump microdescriptor (wrote %lu out of %lu): %s",
@@ -115,6 +124,9 @@
 {
   if (PREDICT_UNLIKELY(the_microdesc_cache==NULL)) {
     microdesc_cache_t *cache = tor_malloc_zero(sizeof(microdesc_cache_t));
+    cache->cache_content = tor_malloc_zero(sizeof(tor_mmap_t));
+    cache->cache_content->data = NULL;
+    cache->cache_content->size = cache->cache_content->mapping_size = 0;
     HT_INIT(microdesc_map, &cache->map);
     cache->cache_fname = get_datadir_fname("cached-microdescs");
     cache->journal_fname = get_datadir_fname("cached-microdescs.new");
@@ -215,6 +227,7 @@
   added = smartlist_new();
   SMARTLIST_FOREACH_BEGIN(descriptors, microdesc_t *, md) {
     microdesc_t *md2;
+    md->saved_location = where;
     md2 = HT_FIND(microdesc_map, &cache->map, md);
     if (md2) {
       /* We already had this one. */
@@ -229,6 +242,7 @@
     /* Okay, it's a new one. */
     if (f) {
       size_t annotation_len;
+      /* Write it to the file */
       size = dump_microdescriptor(f, md, &annotation_len);
       if (size < 0) {
         /* we already warned in dump_microdescriptor; */
@@ -236,10 +250,20 @@
         smartlist_clear(added);
         return added;
       }
-      md->saved_location = SAVED_IN_JOURNAL;
+      md->off = cache->journal_len + annotation_len;
+      /* Append in the anonymous mmap of microdescriptors */
+      size_t new_offset = cache->cache_content->size;
+      if (load_string_into_mmap(cache->cache_content,
+                                md->body, md->bodylen))
+        /* Loading into mmap failed, so leave it as a heap chunk */
+        md->saved_location = SAVED_IN_JOURNAL;
+      else {
+        /* Body is now in mmap */
+        tor_free(md->body);
+        md->cache_offset = new_offset;
+        md->saved_location = SAVED_IN_CACHE;
+      }
       cache->journal_len += size;
-    } else {
-      md->saved_location = where;
     }
 
     md->no_save = no_save;
@@ -278,9 +302,8 @@
     microdesc_free(md);
   }
   HT_CLEAR(microdesc_map, &cache->map);
-  if (cache->cache_content) {
-    tor_munmap_file(cache->cache_content);
-    cache->cache_content = NULL;
+  if (cache->cache_content->data) {
+    tor_munmap(cache->cache_content);
   }
   cache->total_len_seen = 0;
   cache->n_seen = 0;
@@ -292,36 +315,25 @@
 int
 microdesc_cache_reload(microdesc_cache_t *cache)
 {
-  struct stat st;
-  char *journal_content;
   smartlist_t *added;
-  tor_mmap_t *mm;
   int total = 0;
 
   microdesc_cache_clear(cache);
 
-  mm = cache->cache_content = tor_mmap_file(cache->cache_fname);
-  if (mm) {
-    added = microdescs_add_to_cache(cache, mm->data, mm->data+mm->size,
-                                    SAVED_IN_CACHE, 0, -1, NULL);
-    if (added) {
-      total += smartlist_len(added);
-      smartlist_free(added);
-    }
-  }
+  load_file_into_mmap(cache->cache_content, cache->cache_fname);
+  size_t cache_size = cache->cache_content->size;
 
-  journal_content = read_file_to_str(cache->journal_fname,
-                                     RFTS_IGNORE_MISSING, &st);
-  if (journal_content) {
-    cache->journal_len = (size_t) st.st_size;
-    added = microdescs_add_to_cache(cache, journal_content,
-                                    journal_content+st.st_size,
-                                    SAVED_IN_JOURNAL, 0, -1, NULL);
+  load_file_into_mmap(cache->cache_content, cache->journal_fname);
+  cache->journal_len = cache->cache_content->size - cache_size;
+
+  if (cache->cache_content->size) {
+    added = microdescs_add_to_cache(cache, cache->cache_content->data,
+                       cache->cache_content->data+cache->cache_content->size,
+                       SAVED_IN_CACHE, 0, -1, NULL);
     if (added) {
       total += smartlist_len(added);
       smartlist_free(added);
     }
-    tor_free(journal_content);
   }
   log_notice(LD_DIR, "Reloaded microdescriptor cache.  Found %d descriptors.",
              total);
@@ -427,7 +439,6 @@
   log_info(LD_DIR, "Rebuilding the microdescriptor cache...");
 
   orig_size = (int)(cache->cache_content ? cache->cache_content->size : 0);
-  orig_size += (int)cache->journal_len;
 
   f = start_writing_to_stdio_file(cache->cache_fname,
                                   OPEN_FLAGS_REPLACE|O_BINARY,
@@ -459,14 +470,12 @@
     smartlist_add(wrote, md);
   }
 
-  if (cache->cache_content)
-    tor_munmap_file(cache->cache_content);
+  if (cache->cache_content->data)
+    tor_munmap(cache->cache_content);
 
   finish_writing_to_file(open_file); /*XXX Check me.*/
 
-  cache->cache_content = tor_mmap_file(cache->cache_fname);
-
-  if (!cache->cache_content && smartlist_len(wrote)) {
+  if (load_file_into_mmap(cache->cache_content, cache->cache_fname) && smartlist_len(wrote)) {
     log_err(LD_DIR, "Couldn't map file that we just wrote to %s!",
             cache->cache_fname);
     smartlist_free(wrote);
@@ -474,21 +483,21 @@
   }
   SMARTLIST_FOREACH_BEGIN(wrote, microdesc_t *, md) {
     tor_assert(md->saved_location == SAVED_IN_CACHE);
-    md->body = (char*)cache->cache_content->data + md->off;
+    md->cache_offset = md->off;
     if (PREDICT_UNLIKELY(
-             md->bodylen < 9 || fast_memneq(md->body, "onion-key", 9) != 0)) {
+             md->bodylen < 9 || fast_memneq(microdesc_get_body(md), "onion-key", 9) != 0)) {
       /* XXXX once bug 2022 is solved, we can kill this block and turn it
        * into just the tor_assert(!memcmp) */
       off_t avail = cache->cache_content->size - md->off;
       char *bad_str;
       tor_assert(avail >= 0);
-      bad_str = tor_strndup(md->body, MIN(128, (size_t)avail));
+      bad_str = tor_strndup(microdesc_get_body(md), MIN(128, (size_t)avail));
       log_err(LD_BUG, "After rebuilding microdesc cache, offsets seem wrong. "
               " At offset %d, I expected to find a microdescriptor starting "
               " with \"onion-key\".  Instead I got %s.",
               (int)md->off, escaped(bad_str));
       tor_free(bad_str);
-      tor_assert(fast_memeq(md->body, "onion-key", 9));
+      tor_assert(fast_memeq(microdesc_get_body(md), "onion-key", 9));
     }
   } SMARTLIST_FOREACH_END(md);
 
@@ -498,7 +507,7 @@
   cache->journal_len = 0;
   cache->bytes_dropped = 0;
 
-  new_size = cache->cache_content ? (int)cache->cache_content->size : 0;
+  new_size = (int)cache->cache_content->size;
   log_info(LD_DIR, "Done rebuilding microdesc cache. "
            "Saved %d bytes; %d still used.",
            orig_size-new_size, new_size);
@@ -594,6 +603,7 @@
     microdesc_cache_clear(the_microdesc_cache);
     tor_free(the_microdesc_cache->cache_fname);
     tor_free(the_microdesc_cache->journal_fname);
+    tor_free(the_microdesc_cache->cache_content);
     tor_free(the_microdesc_cache);
   }
 }
diff -uNr tor-0.2.3.19-rc/src/or/microdesc.h tor-0.2.3.19-rc-anon_mmap//src/or/microdesc.h
--- tor-0.2.3.19-rc/src/or/microdesc.h	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/microdesc.h	2012-07-09 11:39:12.011224656 -0400
@@ -14,6 +14,8 @@
 
 microdesc_cache_t *get_microdesc_cache(void);
 
+char* microdesc_get_body(const microdesc_t *md);
+
 void microdesc_check_counts(void);
 
 smartlist_t *microdescs_add_to_cache(microdesc_cache_t *cache,
diff -uNr tor-0.2.3.19-rc/src/or/or.h tor-0.2.3.19-rc-anon_mmap//src/or/or.h
--- tor-0.2.3.19-rc/src/or/or.h	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/or.h	2012-07-09 11:39:12.015224656 -0400
@@ -1633,16 +1633,14 @@
   /** The descriptor isn't stored on disk at all: the copy in memory is
    * canonical; the saved_offset field is meaningless. */
   SAVED_NOWHERE=0,
-  /** The descriptor is stored in the cached_routers file: the
+  /** The descriptor is stored in the cached_routers file or in the journal.
+   * In both cases the body is kept in the anonymous mmap: the
    * signed_descriptor_body is meaningless; the signed_descriptor_len and
-   * saved_offset are used to index into the mmaped cache file. */
+   * saved_offset are used to index into the memory map. */
   SAVED_IN_CACHE,
-  /** The descriptor is stored in the cached_routers.new file: the
+  /** The descriptor is stored in the cached_routers.new file but we've
+   * failed to get space in the anonymous mmap (memory error). The
    * signed_descriptor_body and saved_offset fields are both set. */
-  /* FFFF (We could also mmap the file and grow the mmap as needed, or
-   * lazy-load the descriptor text by using seek and read.  We don't, for
-   * now.)
-   */
   SAVED_IN_JOURNAL
 } saved_location_t;
 
@@ -1696,8 +1694,8 @@
   download_status_t ei_dl_status;
   /** Where is the descriptor saved? */
   saved_location_t saved_location;
-  /** If saved_location is SAVED_IN_CACHE or SAVED_IN_JOURNAL, the offset of
-   * this descriptor in the corresponding file. */
+  /** The position of the body in anonymous memory map dedicated to holding
+   * descriptors that are saved in files. */
   off_t saved_offset;
   /** What position is this descriptor within routerlist->routers or
    * routerlist->old_routers? -1 for none. */
@@ -1949,9 +1947,13 @@
   unsigned int held_by_nodes;
 
   /** If saved_location == SAVED_IN_CACHE, this field holds the offset of the
-   * microdescriptor in the cache. */
+   * microdescriptor in the file that holds it cache. */
   off_t off;
 
+  /** If saved_location == SAVED_IN_CACHE, this field holds the offset to the
+   * microdescriptor body in the anonymous memory map */
+  size_t cache_offset;
+
   /* The string containing the microdesc. */
 
   /** A pointer to the encoded body of the microdescriptor.  If the
diff -uNr tor-0.2.3.19-rc/src/or/routerlist.c tor-0.2.3.19-rc-anon_mmap//src/or/routerlist.c
--- tor-0.2.3.19-rc/src/or/routerlist.c	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/routerlist.c	2012-07-09 11:39:12.019224656 -0400
@@ -627,8 +627,9 @@
 }
 
 /** Add the signed_descriptor_t in <b>desc</b> to the router
- * journal; change its saved_location to SAVED_IN_JOURNAL and set its
- * offset appropriately. */
+ * journal; change its saved_location to SAVED_IN_CACHE and set its
+ * offset appropriately. The location is set to SAVED_IN_JOURNAL
+ * only if we can't move the body to the cache memory map */
 static int
 signed_desc_append_to_journal(signed_descriptor_t *desc,
                               desc_store_t *store)
@@ -642,10 +643,18 @@
     tor_free(fname);
     return -1;
   }
-  desc->saved_location = SAVED_IN_JOURNAL;
   tor_free(fname);
 
-  desc->saved_offset = store->journal_len;
+  size_t mmap_offset = store->mmap->size;
+  /* If we can't move the body into the map, leave it where it is */
+  if (load_string_into_mmap(store->mmap, desc->signed_descriptor_body,
+                      desc->signed_descriptor_len + desc->annotations_len))
+    desc->saved_location = SAVED_IN_JOURNAL;
+  else {
+    tor_free(desc->signed_descriptor_body);
+    desc->saved_offset = mmap_offset;
+    desc->saved_location = SAVED_IN_CACHE;
+  }
   store->journal_len += len;
 
   return 0;
@@ -674,7 +683,7 @@
 router_rebuild_store(int flags, desc_store_t *store)
 {
   smartlist_t *chunk_list = NULL;
-  char *fname = NULL, *fname_tmp = NULL;
+  char *fname = NULL;
   int r = -1;
   off_t offset = 0;
   smartlist_t *signed_descriptors = NULL;
@@ -705,7 +714,6 @@
   log_info(LD_DIR, "Rebuilding %s cache", store->description);
 
   fname = get_datadir_fname(store->fname_base);
-  fname_tmp = get_datadir_fname_suffix(store->fname_base, ".tmp");
 
   chunk_list = smartlist_new();
 
@@ -750,25 +758,19 @@
       smartlist_add(chunk_list, c);
     });
 
-  if (write_chunks_to_file(fname_tmp, chunk_list, 1)<0) {
+  if (write_chunks_to_file(fname, chunk_list, 1)<0) {
     log_warn(LD_FS, "Error writing router store to disk.");
     goto done;
   }
 
   /* Our mmap is now invalid. */
   if (store->mmap) {
-    tor_munmap_file(store->mmap);
-    store->mmap = NULL;
-  }
-
-  if (replace_file(fname_tmp, fname)<0) {
-    log_warn(LD_FS, "Error replacing old router store: %s", strerror(errno));
-    goto done;
+    tor_munmap(store->mmap);
   }
 
   errno = 0;
-  store->mmap = tor_mmap_file(fname);
-  if (! store->mmap) {
+  load_file_into_mmap(store->mmap, fname);
+  if (!store->mmap) {
     if (errno == ERANGE) {
       /* empty store.*/
       if (total_expected_len) {
@@ -811,7 +813,6 @@
  done:
   smartlist_free(signed_descriptors);
   tor_free(fname);
-  tor_free(fname_tmp);
   if (chunk_list) {
     SMARTLIST_FOREACH(chunk_list, sized_chunk_t *, c, tor_free(c));
     smartlist_free(chunk_list);
@@ -826,10 +827,11 @@
 static int
 router_reload_router_list_impl(desc_store_t *store)
 {
-  char *fname = NULL, *altname = NULL, *contents = NULL;
-  struct stat st;
+  char *fname = NULL, *altname = NULL;
   int read_from_old_location = 0;
   int extrainfo = (store->type == EXTRAINFO_STORE);
+  int r;
+  size_t cache_size;
   time_t now = time(NULL);
   store->journal_len = store->store_len = 0;
 
@@ -837,60 +839,56 @@
   if (store->fname_alt_base)
     altname = get_datadir_fname(store->fname_alt_base);
 
-  if (store->mmap) /* get rid of it first */
-    tor_munmap_file(store->mmap);
-  store->mmap = NULL;
-
-  store->mmap = tor_mmap_file(fname);
-  if (!store->mmap && altname && file_status(altname) == FN_FILE) {
-    read_from_old_location = 1;
+  if (store->mmap->size) /* get rid of it first */
+    tor_munmap(store->mmap);
+
+  /* Load the cache file into an anonymous map first */
+  if (load_file_into_mmap(store->mmap, fname) &&
+      altname && file_status(altname) == FN_FILE) {
     log_notice(LD_DIR, "Couldn't read %s; trying to load routers from old "
                "location %s.", fname, altname);
-    if ((store->mmap = tor_mmap_file(altname)))
+    if (!(load_file_into_mmap(store->mmap, altname)))
       read_from_old_location = 1;
   }
   if (altname && !read_from_old_location) {
     remove_file_if_very_old(altname, now);
   }
-  if (store->mmap) {
-    store->store_len = store->mmap->size;
-    if (extrainfo)
-      router_load_extrainfo_from_string(store->mmap->data,
-                                        store->mmap->data+store->mmap->size,
-                                        SAVED_IN_CACHE, NULL, 0);
-    else
-      router_load_routers_from_string(store->mmap->data,
-                                      store->mmap->data+store->mmap->size,
-                                      SAVED_IN_CACHE, NULL, 0, NULL);
-  }
 
+  /* Remeber the size of the current data, so we can determine
+   * whether we've read anything from the journal */
+  cache_size = store->mmap->size;
   tor_free(fname);
   fname = get_datadir_fname_suffix(store->fname_base, ".new");
-  if (file_status(fname) == FN_FILE)
-    contents = read_file_to_str(fname, RFTS_BIN|RFTS_IGNORE_MISSING, &st);
+  r = 0;
+  if ((file_status(fname) == FN_FILE) && (r = load_file_into_mmap(store->mmap, fname)))
+    log_warn(LD_DIR, "Couldn't read journal %s", fname);
   if (read_from_old_location) {
     tor_free(altname);
     altname = get_datadir_fname_suffix(store->fname_alt_base, ".new");
-    if (!contents)
-      contents = read_file_to_str(altname, RFTS_BIN|RFTS_IGNORE_MISSING, &st);
+    if (r)
+      load_file_into_mmap(store->mmap, altname);
     else
       remove_file_if_very_old(altname, now);
   }
-  if (contents) {
+
+  /* Load router data from the map */
+  if (store->mmap->size) {
+    store->store_len = store->mmap->size;
     if (extrainfo)
-      router_load_extrainfo_from_string(contents, NULL,SAVED_IN_JOURNAL,
-                                        NULL, 0);
+      router_load_extrainfo_from_string(store->mmap->data,
+                                        store->mmap->data+store->mmap->size,
+                                        SAVED_IN_CACHE, NULL, 0);
     else
-      router_load_routers_from_string(contents, NULL, SAVED_IN_JOURNAL,
-                                      NULL, 0, NULL);
-    store->journal_len = (size_t) st.st_size;
-    tor_free(contents);
+      router_load_routers_from_string(store->mmap->data,
+                                      store->mmap->data+store->mmap->size,
+                                      SAVED_IN_CACHE, NULL, 0, NULL);
   }
 
   tor_free(fname);
   tor_free(altname);
 
-  if (store->journal_len || read_from_old_location) {
+  /* rebuild if journal was not empty or we used old locations */
+  if ((store->mmap->size-cache_size>0) || read_from_old_location) {
     /* Always clear the journal on startup.*/
     router_rebuild_store(RRS_FORCE, store);
   } else if (!extrainfo) {
@@ -2691,6 +2689,13 @@
 
     routerlist->desc_store.description = "router descriptors";
     routerlist->extrainfo_store.description = "extra-info documents";
+
+    routerlist->desc_store.mmap = tor_malloc_zero(sizeof(tor_mmap_t));
+    routerlist->desc_store.mmap->data = NULL;
+    routerlist->desc_store.mmap->size = routerlist->desc_store.mmap->mapping_size = 0;
+    routerlist->extrainfo_store.mmap = tor_malloc_zero(sizeof(tor_mmap_t));
+    routerlist->extrainfo_store.mmap->data = NULL;
+    routerlist->extrainfo_store.mmap->size = routerlist->extrainfo_store.mmap->mapping_size = 0;
   }
   return routerlist;
 }
@@ -2787,10 +2792,14 @@
                     signed_descriptor_free(sd));
   smartlist_free(rl->routers);
   smartlist_free(rl->old_routers);
-  if (routerlist->desc_store.mmap)
-    tor_munmap_file(routerlist->desc_store.mmap);
-  if (routerlist->extrainfo_store.mmap)
-    tor_munmap_file(routerlist->extrainfo_store.mmap);
+  if (routerlist->desc_store.mmap) {
+    tor_munmap(routerlist->desc_store.mmap);
+    tor_free(routerlist->desc_store.mmap);
+  }
+  if (routerlist->extrainfo_store.mmap) {
+    tor_munmap(routerlist->extrainfo_store.mmap);
+    free(routerlist->extrainfo_store.mmap);
+  }
   tor_free(rl);
 
   router_dir_info_changed();
diff -uNr tor-0.2.3.19-rc/src/or/routerparse.c tor-0.2.3.19-rc-anon_mmap//src/or/routerparse.c
--- tor-0.2.3.19-rc/src/or/routerparse.c	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/or/routerparse.c	2012-07-09 11:39:12.023224656 -0400
@@ -4387,18 +4387,19 @@
     }
 
     md = tor_malloc_zero(sizeof(microdesc_t));
-    {
-      const char *cp = tor_memstr(s, start_of_next_microdesc-s,
+    const char *cp = tor_memstr(s, start_of_next_microdesc-s,
                                   "onion-key");
-      tor_assert(cp);
+    tor_assert(cp);
 
-      md->bodylen = start_of_next_microdesc - cp;
-      if (copy_body)
-        md->body = tor_strndup(cp, md->bodylen);
-      else
-        md->body = (char*)cp;
-      md->off = cp - start;
+    md->bodylen = start_of_next_microdesc - cp;
+    if (copy_body)
+      md->body = tor_strndup(cp, md->bodylen);
+    else {
+      /* we're parsing the cache */
+      md->body = NULL;
+      md->cache_offset = cp - start;
     }
+    md->off = cp - start;
 
     if ((tok = find_opt_by_keyword(tokens, A_LAST_LISTED))) {
       if (parse_iso_time(tok->args[0], &md->last_listed)) {
@@ -4433,7 +4434,7 @@
       md->exit_policy = parse_short_policy(tok->args[0]);
     }
 
-    crypto_digest256(md->digest, md->body, md->bodylen, DIGEST_SHA256);
+    crypto_digest256(md->digest, cp, md->bodylen, DIGEST_SHA256);
 
     smartlist_add(result, md);
 
diff -uNr tor-0.2.3.19-rc/src/test/test_microdesc.c tor-0.2.3.19-rc-anon_mmap//src/test/test_microdesc.c
--- tor-0.2.3.19-rc/src/test/test_microdesc.c	2012-07-06 16:31:36.000000000 -0400
+++ tor-0.2.3.19-rc-anon_mmap//src/test/test_microdesc.c	2012-07-09 11:39:12.023224656 -0400
@@ -55,6 +55,7 @@
   time_t time1, time2, time3;
   char *fn = NULL, *s = NULL;
   (void)data;
+  tor_mmap_t *map;
 
   options = get_options_mutable();
   tt_assert(options);
@@ -134,25 +135,25 @@
   tt_int_op(md2->last_listed, ==, time2);
   tt_int_op(md3->last_listed, ==, time3);
 
-  tt_int_op(md1->saved_location, ==, SAVED_IN_JOURNAL);
-  tt_int_op(md2->saved_location, ==, SAVED_IN_JOURNAL);
-  tt_int_op(md3->saved_location, ==, SAVED_IN_JOURNAL);
+  tt_int_op(md1->saved_location, ==, SAVED_IN_CACHE);
+  tt_int_op(md2->saved_location, ==, SAVED_IN_CACHE);
+  tt_int_op(md3->saved_location, ==, SAVED_IN_CACHE);
 
   tt_int_op(md1->bodylen, ==, strlen(test_md1));
   tt_int_op(md2->bodylen, ==, strlen(test_md2));
   tt_int_op(md3->bodylen, ==, strlen(test_md3_noannotation));
-  test_mem_op(md1->body, ==, test_md1, strlen(test_md1));
-  test_mem_op(md2->body, ==, test_md2, strlen(test_md2));
-  test_mem_op(md3->body, ==, test_md3_noannotation,
+  test_mem_op(microdesc_get_body(md1), ==, test_md1, strlen(test_md1));
+  test_mem_op(microdesc_get_body(md2), ==, test_md2, strlen(test_md2));
+  test_mem_op(microdesc_get_body(md3), ==, test_md3_noannotation,
               strlen(test_md3_noannotation));
 
   tor_asprintf(&fn, "%s"PATH_SEPARATOR"cached-microdescs.new",
                options->DataDirectory);
   s = read_file_to_str(fn, RFTS_BIN, NULL);
   tt_assert(s);
-  test_mem_op(md1->body, ==, s + md1->off, md1->bodylen);
-  test_mem_op(md2->body, ==, s + md2->off, md2->bodylen);
-  test_mem_op(md3->body, ==, s + md3->off, md3->bodylen);
+  test_mem_op(microdesc_get_body(md1), ==, s + md1->off, md1->bodylen);
+  test_mem_op(microdesc_get_body(md2), ==, s + md2->off, md2->bodylen);
+  test_mem_op(microdesc_get_body(md3), ==, s + md3->off, md3->bodylen);
 
   tt_ptr_op(md1->family, ==, NULL);
   tt_ptr_op(md3->family, !=, NULL);
@@ -175,11 +176,15 @@
 
   /* read the cache. */
   tor_asprintf(&fn, "%s"PATH_SEPARATOR"cached-microdescs",
-               options->DataDirectory);
-  s = read_file_to_str(fn, RFTS_BIN, NULL);
-  test_mem_op(md1->body, ==, s + md1->off, strlen(test_md1));
-  test_mem_op(md2->body, ==, s + md2->off, strlen(test_md2));
-  test_mem_op(md3->body, ==, s + md3->off, strlen(test_md3_noannotation));
+              options->DataDirectory);
+  map = tor_malloc(sizeof(tor_mmap_t));
+  map->data = NULL;
+  map->size = map->mapping_size = 0;
+  load_file_into_mmap(map, fn);
+  s = (char*)map->data;
+  test_mem_op(microdesc_get_body(md1), ==, s + md1->off, strlen(test_md1));
+  test_mem_op(microdesc_get_body(md2), ==, s + md2->off, strlen(test_md2));
+  test_mem_op(microdesc_get_body(md3), ==, s + md3->off, strlen(test_md3_noannotation));
 
   /* Okay, now we are going to forget about the cache entirely, and reload it
    * from the disk. */
@@ -191,9 +196,9 @@
   test_assert(md1);
   test_assert(md2);
   test_assert(md3);
-  test_mem_op(md1->body, ==, s + md1->off, strlen(test_md1));
-  test_mem_op(md2->body, ==, s + md2->off, strlen(test_md2));
-  test_mem_op(md3->body, ==, s + md3->off, strlen(test_md3_noannotation));
+  test_mem_op(microdesc_get_body(md1), ==, s + md1->off, strlen(test_md1));
+  test_mem_op(microdesc_get_body(md2), ==, s + md2->off, strlen(test_md2));
+  test_mem_op(microdesc_get_body(md3), ==, s + md3->off, strlen(test_md3_noannotation));
 
   tt_int_op(md1->last_listed, ==, time1);
   tt_int_op(md2->last_listed, ==, time2);
@@ -222,7 +227,8 @@
   if (wanted)
     SMARTLIST_FOREACH(wanted, char *, cp, tor_free(cp));
   smartlist_free(wanted);
-  tor_free(s);
+  tor_munmap(map);
+  tor_free(map);
   tor_free(fn);
 }
 
